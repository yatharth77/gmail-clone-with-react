[{"/Users/ys/Desktop/Bootcamp2/gmailclone/src/index.js":"1","/Users/ys/Desktop/Bootcamp2/gmailclone/src/reportWebVitals.js":"2","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/apiManager.ts":"3","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/dbManager.ts":"4","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/constant.ts":"5","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/fetchData.ts":"6","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/refreshToken.ts":"7","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/googleCredentials.ts":"8","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/startStopSync.ts":"9","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/PartialSync.ts":"10","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/ThreadList.tsx":"11","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Sidebar.tsx":"12","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Logout.tsx":"13","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Login.tsx":"14","/Users/ys/Desktop/Bootcamp2/gmailclone/src/store/index.ts":"15","/Users/ys/Desktop/Bootcamp2/gmailclone/src/reducers/index.ts":"16","/Users/ys/Desktop/Bootcamp2/gmailclone/src/actions/index.ts":"17","/Users/ys/Desktop/Bootcamp2/gmailclone/src/constants/action-types.ts":"18","/Users/ys/Desktop/Bootcamp2/gmailclone/src/App.tsx":"19"},{"size":573,"mtime":1614883429150,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1611820259043,"results":"22","hashOfConfig":"21"},{"size":1307,"mtime":1617083646269,"results":"23","hashOfConfig":"21"},{"size":1931,"mtime":1617081463314,"results":"24","hashOfConfig":"21"},{"size":38,"mtime":1617017523098,"results":"25","hashOfConfig":"21"},{"size":2758,"mtime":1617083817941,"results":"26","hashOfConfig":"21"},{"size":401,"mtime":1617051520725,"results":"27","hashOfConfig":"21"},{"size":354,"mtime":1617051466322,"results":"28","hashOfConfig":"21"},{"size":333,"mtime":1617074970321,"results":"29","hashOfConfig":"21"},{"size":6547,"mtime":1617084059891,"results":"30","hashOfConfig":"21"},{"size":2064,"mtime":1617269886846,"results":"31","hashOfConfig":"21"},{"size":3168,"mtime":1617180693956,"results":"32","hashOfConfig":"21"},{"size":1373,"mtime":1617180437773,"results":"33","hashOfConfig":"21"},{"size":5015,"mtime":1617180664029,"results":"34","hashOfConfig":"21"},{"size":145,"mtime":1617187346390,"results":"35","hashOfConfig":"21"},{"size":993,"mtime":1617191924564,"results":"36","hashOfConfig":"21"},{"size":662,"mtime":1617191436268,"results":"37","hashOfConfig":"21"},{"size":183,"mtime":1617190863679,"results":"38","hashOfConfig":"21"},{"size":1321,"mtime":1617269809198,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"hesej9",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"54","usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"61","usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},"/Users/ys/Desktop/Bootcamp2/gmailclone/src/index.js",[],["87","88"],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/reportWebVitals.js",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/apiManager.ts",[],["89","90"],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/dbManager.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/constant.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/fetchData.ts",["91","92"],"import { ApiManager } from './apiManager'\nimport { serachDB, Labels, Threads, Messages } from './dbManager'\nexport class FetchData{\n    apiManager: any;\n    db: any;\n    constructor(db: any){\n        this.apiManager = new ApiManager(\"me\");\n        this.db = db;\n    }\n\n    fetchUserProfile = async () => {\n        this.apiManager.fetchAPI(\"profile\").then((profileJson: any) => {\n            for(var key in profileJson){\n                const detail: IProfileDetail = {key: key, value: profileJson[key]}\n                this.db.profile.put({ ... detail });\n            }\n        })\n    }\n\n    fetchLabels = async () => {\n        const labelData = await serachDB(\"flockdev07@gmail.com\", \"labels\");\n        if(!labelData){\n            this.apiManager.fetchAPI(\"labels\").then((labelJson: ILabelJson) => {\n                labelJson.labels.map((value: Labels) => \n                    this.db.labels.put({ ...value })\n                )\n            })\n        }\n    }\n\n    fetchThreads = async () => {\n        const threadData = await serachDB(\"flockdev07@gmail.com\", \"threads\");\n        if(!threadData){\n            this.apiManager.fetchAPI(\"threads\", \"\").then((threadJson: IThreadJson) => {\n                let threadArray = []\n                threadJson.threads.map((value: IGetThread) => \n                    this.apiManager.fetchAPI(\"threads\", value.id).then(((threadDetailJson: Threads) => {\n                        threadArray.push(threadDetailJson);\n                        let unionLabels: string[] = [];\n                        threadDetailJson.messages.map((value: any) => {\n                            unionLabels = Array.from(new Set([...unionLabels, ...value.labelIds]))\n                            this.apiManager.fetchAPI(\"messages\", value.id).then((messageDetailJson: Messages) => \n                                this.db.messages.put({ ...messageDetailJson })\n                            )\n                        })\n                        threadDetailJson.labels = unionLabels;\n                        this.db.threads.put({ ...threadDetailJson });\n                    }))\n                )\n            })\n        }\n    }\n\n    fetchLabelsAndThreads = async () => {\n        this.fetchLabels();\n        this.fetchThreads();\n    }\n}\n\nexport interface IThreadJson {\n    resultSizeEstimate: number;\n    threads: {historyId: string, id: string, snippet: string, proto?: any}[];   \n}\n\nexport interface IProfile{\n    emailAddress: string\n    historyId: string\n    messagesTotal: number\n    threadsTotal: number\n    proto?: any\n}\n\nexport interface IProfileDetail{\n    key: string\n    value: any\n}\n\n\nexport interface ILabelJson{\n    labels: Labels[]\n}\n\nexport interface IGetThread{\n    historyId: string\n    id: string\n    snippet: string\n    proto?: any\n}\n","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/refreshToken.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/googleCredentials.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/startStopSync.ts",["93","94"],"import { PartialSync } from './PartialSync'\nimport { getDB } from './dbManager'\n\nexport function beginSync() {\n    const db = getDB();\n    const partialSync = new PartialSync;\n    partialSync.setDB(db);\n    partialSync.syncData();\n}\n\nexport function stopSync() {\n    const partialSync = new PartialSync;\n    partialSync.stopSync();\n}","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/PartialSync.ts",["95","96"],"import { ApiManager } from './apiManager'\nimport { PARTIAL_SYNC_TIME } from './constant'\nimport { Labels, Threads, Messages } from './dbManager'\nexport class PartialSync {\n    db: any;\n    interval: any;\n\n    setDB = (db: any) => {\n        this.db = db;\n    }\n\n    handleLabelsRemoved = (labelsRemovedJson: IThreadlabelModified[]) => {\n        labelsRemovedJson.forEach((message: any) => {\n            const threadId: string = message.message.threadId;\n            const messageId: string = message.message.id;\n            const labelIds: string[] = message.message.labelIds;\n            this.db.messages.update(messageId, {...{labelIds: labelIds}});\n            this.db.threads.where('id').equals(threadId).modify((thread: Threads) => {\n                const allMsg = thread.messages;\n                let unionLabels: string[] = [];\n                for(message in allMsg){\n                    if(allMsg[message].id == messageId) {\n                        allMsg[message].labelIds = labelIds;\n                    }\n                    unionLabels = Array.from(new Set([...unionLabels, ...allMsg[message].labelIds]))\n                }\n                thread.messages = allMsg;\n                thread.labels = unionLabels;\n            })\n        })  \n    }\n\n    handleLabelsAdded = (labelsAddedJson: IThreadlabelModified[]) => {\n        labelsAddedJson.forEach((message: any) => {\n            const threadId: string = message.message.threadId;\n            const messageId: string = message.message.id;\n            const labelIds : string[] = message.message.labelIds\n            this.db.messages.update(messageId, {...{labelIds: labelIds}});\n            this.db.threads.where('id').equals(threadId).modify((thread: Threads) => {\n                const allMsg = thread.messages;\n                let unionLabels: string[] = [];\n                for(message in allMsg){\n                    if(allMsg[message].id == messageId) {\n                        allMsg[message].labelIds = labelIds;\n                    }\n                    unionLabels = Array.from(new Set([...unionLabels, ...allMsg[message].labelIds]))\n                }\n                thread.messages = allMsg;\n                thread.labels = unionLabels;\n                return thread;\n            })\n        })  \n    }\n\n    handleMessagesAdded = async (messagesAddedJson: IMesaageAction[], apiManager: any) => {\n        messagesAddedJson.forEach(async (message: any) => {\n            const threadId: string = message.message.threadId;\n            const messageId: string = message.message.id;\n            apiManager.fetchAPI(\"messages\", messageId).then(async (messageDetailJson: Messages) => {\n                this.db.messages.put({ ...messageDetailJson })\n                const threadExist = await this.db.threads.get(threadId);\n                if(threadExist){\n                    this.db.threads.where('id').equals(threadId).modify((thread: Threads) => {\n                        thread.labels.concat(messageDetailJson.labelIds);\n                        thread.messages.push(messageDetailJson)\n                        return thread;\n                    })\n                }\n                else{\n                    apiManager.fetchAPI(\"threads\", threadId).then(((threadDetailJson: Threads) => {\n                        threadDetailJson.labels = messageDetailJson.labelIds;\n                        this.db.threads.put({ ...threadDetailJson });\n                    }))\n                }\n            })\n        })\n    }\n\n    handleMessagesDeleted = (messagesDeletedJson: IMesaageAction[]) => {\n        messagesDeletedJson.forEach((message: any) => {\n            const threadId: string = message.message.threadId;\n            const messageId: string = message.message.id;\n            this.db.messages.delete(messageId);\n            this.db.threads.where('id').equals(threadId).modify((thread: Threads) => {\n                const allMsg = thread.messages;\n                let unionLabels: string[] = [];\n                for(message in allMsg) {\n                    if(allMsg[message].id === messageId)\n                        allMsg.splice(message, 1);\n                    else\n                        unionLabels = Array.from(new Set([...unionLabels, ...allMsg[message].labelIds]))\n                }\n                thread.messages = allMsg;\n                thread.labels = unionLabels;\n                return thread;\n            });\n        })\n    }\n\n    syncMessageLabels = async () => {\n        const historyIdObject: any = await this.db.profile.get(\"historyId\");\n        const historyId: string = historyIdObject.value;\n        var data: string = `startHistoryId=${historyId}&historyTypes=labelRemoved&historyTypes=labelAdded&historyTypes=messageAdded&historyTypes=messageDeleted`;\n        const apiManager = new ApiManager(\"me\");\n        apiManager.fetchAPI(\"history\", \"\", data).then((responseJson: any) => {\n            const responseHistoryJson = responseJson.history;\n            if(!responseHistoryJson) return;\n            for(let index in responseHistoryJson){\n                const thread = responseHistoryJson[index];\n                if(!thread.labelsRemoved && !thread.labelsAdded && !thread.messagesAdded && !thread.messagesDeleted){\n                    continue;\n                }   \n                const labelsRemovedJson = thread.labelsRemoved;\n                if(labelsRemovedJson) this.handleLabelsRemoved(labelsRemovedJson);\n\n                const labelsAddedJson = thread.labelsAdded;\n                if(labelsAddedJson) this.handleLabelsAdded(labelsAddedJson);\n\n                const messagesAddedJson = thread.messagesAdded;\n                if(messagesAddedJson) this.handleMessagesAdded(messagesAddedJson, apiManager);\n\n                const messagesDeletedJson = thread.messagesDeleted;\n                if(messagesDeletedJson) this.handleMessagesDeleted(messagesDeletedJson)\n            }\n            this.db.profile.update('historyId', { ...{value: responseJson.historyId}});\n        })\n\n        apiManager.fetchAPI(\"labels\").then((labelJson: any) => {\n            labelJson.labels.map((value: Labels) => \n                this.db.labels.put({ ...value })\n            )\n        })\n    }\n\n    syncData = () => {\n        this.interval = setInterval(this.syncMessageLabels, PARTIAL_SYNC_TIME);\n    }\n\n    stopSync = () => {\n        clearInterval(this.interval);\n    }\n}\n\nexport interface IMesaageAction {\n    id: string, \n    labelIds: string[], \n    threadId: string\n}\n\nexport interface IThreadlabelModified {\n    labelIds: string[], \n    message: IMesaageAction[]\n}\n","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/ThreadList.tsx",["97","98","99","100"],"import { Threads } from '../utils/dbManager'\nimport parse from 'html-react-parser';\nimport '../style/style.css'\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport store from \"../store/index\"\nimport { getDB } from '../utils/dbManager'\nimport $ from \"jquery\";\n\nfunction ThreadList() {\n    const activeLabel = store.getState().activeLabel;\n    const db = getDB();\n    const threadResult = useLiveQuery(\n        () => db.threads.filter((thread: Threads) => thread.labels.includes(activeLabel)).toArray(),\n        [activeLabel]\n    );\n    \n    if(!threadResult) return (<div>No thread found</div>);\n\n    const hideThreads = (threadIndex: number) => {\n        console.log(\"testing\");\n        $(`#thread${threadIndex}`).toggle();\n    }\n    return(\n        <div className=\"list-group\">\n            {\n                threadResult.map((thread: Threads, threadIndex: number) => {\n                    const messages = thread.messages;\n                    const firstMessage = messages[0].snippet;\n                    return (\n                        <div key={threadIndex}>\n                            <a onClick = {() => hideThreads(threadIndex)}>\n                            <a href=\"#\" className=\"list-group-header\">{firstMessage.substring(0, 90)}. . .</a> \n                            <div className=\"list-group-threads\" id={'thread'+threadIndex}>\n                            {\n                                messages.map((message, messageIndex) => {\n                                    if(message.labelIds.includes('TRASH') && activeLabel != 'TRASH') return null;\n                                    return (<a href=\"#\" className=\"list-group-item\" key={messageIndex}><p>Message {messageIndex+1}:</p>{parse(message.snippet)}</a>)\n                                })\n                            }\n                            </div>\n                            <hr className = 'divider-middle'/>\n                            </a>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n\n}\n\nexport default ThreadList;\n ","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Sidebar.tsx",["101"],"import React from 'react'\nimport { Labels } from '../utils/dbManager'\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { getDB } from '../utils/dbManager'\nimport { setActiveLabel } from \"../actions/index\";\nimport { connect } from \"react-redux\";\nimport Logout from './Logout';\n\nfunction mapDispatchToProps(dispatch: any) {\n    return {\n      setActiveLabel: (activeLabel: string) => dispatch(setActiveLabel(activeLabel)),\n    };\n  }\n\n\nfunction Sidebar(props: any) {\n    const db = getDB();\n    const labelArray = useLiveQuery (\n        () => db.labels.toArray()\n    );\n    if(!labelArray) return null;\n    \n    const handleLabel = async (activeLabel: string) => {\n        activeLabel = activeLabel.toUpperCase();\n        props.setActiveLabel(activeLabel);\n    }\n\n    return (\n        <div>\n            {<Logout />}\n            <ul className=\"list-unstyled components\">\n                <p>Labels</p>\n                {\n                    labelArray.map((value: Labels, index: number) => {\n                        return <li onClick={() => handleLabel(value.name)} key={index}><a>{value.name}</a></li>\n                    })\n                }\n            </ul>\n        </div>\n    )\n}\n\n\nexport default connect(\n    null,\n    mapDispatchToProps\n  )(Sidebar);\n\n\n\n//   import React, {Component} from \"react\";\n// import { liveQuery } from \"dexie\"; \n// import { db } from '../utils/dbManager'\n\n// const allLabelObservable = liveQuery (\n//   () => db.labels.toArray()\n// );\n\n// export class Sidebar2 extends Component {\n//     componentDidMount() {\n//     this.subscription = allLabelObservable.subscribe(\n//         result => {\n//           this.props.setLabels(result)\n//         },\n//         error => {\n//             console.log(error);\n//         }\n//     );\n//     }\n\n//     componentWillUnmount() {\n//         if (this.subscription) {\n//             this.subscription.unsubscribe();\n//             this.subscription = null;\n//         }\n//     }\n\n//     addNewLabel = () => {\n//         db.labels.add({\n//             \"id\": \"TESTING_LABEL\" + Date.now(), \n//             \"name\": \"TESTING_LABEL\" + Date.now(), \n//             \"messageListVisibility\": \"hide\",\n//             \"labelListVisibility\": \"labelHide\", \n//             \"type\": \"system\"\n//         })\n//     }\n\n//     handleLabel = async(labelName) => {\n//         labelName = labelName.toUpperCase();\n//         const labelResults = await db.threads.filter(thread => thread.labels.includes(labelName)).toArray();\n//         this.props.setThreadDetails(labelResults);\n//     }\n\n//     render(){\n//         if (!this.props.labels) return null;\n//         return (\n//             <div>\n//                 <ul className=\"list-unstyled components\">\n//                     <p>Labels</p>\n//                     { \n//                         this.props.labels.map((label, index) => \n//                         <li onClick={() => this.handleLabel(label.name)} key={index}><a href=\"#\">{label.name}</a></li>) \n//                     }\n//                 </ul>\n//                 <button onClick={() => this.addNewLabel()}>Add Labels</button>\n//             </div>\n//         )\n//     }\n// }\n\n// export default Sidebar2","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Logout.tsx",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Login.tsx",["102"],"import React, { Component } from 'react'\nimport { GoogleLogin } from 'react-google-login'\nimport { refreshTokenSetup } from '../utils/refreshToken'\nimport { CLIENT_ID, SCOPES } from '../utils/googleCredentials'\nimport { setUpDB, serachDB } from '../utils/dbManager'\nimport { connect } from \"react-redux\";\nimport { setAccessToken, setUserSignedIn } from \"../actions/index\";\nimport { FetchData } from '../utils/fetchData'\nimport { beginSync } from \"../utils/startStopSync\";\n\ninterface IProps {\n    setAccessToken(accessToken: string): any\n    setUserSignedIn(signedIn: boolean): any\n  }\n\n  \nfunction mapDispatchToProps(dispatch: any) {\n    return {\n      setAccessToken: (accessToken: string) => dispatch(setAccessToken(accessToken)),\n      setUserSignedIn: (signedIn: boolean) => dispatch(setUserSignedIn(signedIn)),\n    };\n  }\n\n  \nclass Login extends Component<IProps> {\n\n    handleLogin = async (response: any) => {\n        if (!response.hasOwnProperty('accessToken')){\n            return;\n        }\n        this.props.setAccessToken(response.tokenObj.access_token);\n        const db = await setUpDB(\"flockdev07@gmail.com\");\n        const fetchData = new FetchData(db);\n        await fetchData.fetchUserProfile();\n        await fetchData.fetchLabelsAndThreads();\n        beginSync();\n        this.props.setUserSignedIn(true);\n        refreshTokenSetup(response);\n    }\n\n    render(){\n        return(\n        <div>\n            <GoogleLogin \n                clientId={CLIENT_ID} \n                scope={SCOPES} \n                onSuccess={this.handleLogin}\n                isSignedIn={true}\n            />\n        </div>\n        )\n    }\n\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n  )(Login);\n\n\n//   import React, { Component } from 'react'\n// import { GoogleLogin } from 'react-google-login'\n// import { refreshTokenSetup } from '../utils/refreshToken'\n// import { CLIENT_ID, SCOPES } from '../utils/googleCredentials'\n// import Dexie from 'dexie'\n// import { ApiManager } from '../utils/apiManager'\n// import { db } from '../utils/dbManager'\n\n// class Login2 extends Component {\n\n//     serachDB = async (dbName, tableName) => {\n//         const exist = await Dexie.exists(dbName);\n//         if(exist){\n//             if(db.table(tableName)) {\n//                 const details = await db.table(tableName).toArray()\n//                 return (details && details.length ? details : null);\n//             }\n//             else{\n//                 return null;\n//             }\n//         }\n//         else{\n//             return null;\n//         }    \n//     }\n\n//     handleResponse = async (response) => {\n//         if (!response.hasOwnProperty('accessToken')){\n//             return;\n//         }\n//         this.props.setAccessToken(response.tokenObj.access_token);\n//         this.props.setSignedInState({ signedIn: true });\n//         const apiManager = new ApiManager(\"me\", this.props.accessToken);\n//         const labelData = await this.serachDB(\"flockdev07@gmail\", \"labels\");\n//         if(labelData){\n//             this.props.setLabels(labelData);\n//         }\n//         else{\n//             apiManager.fetchAPI(\"labels\", \"\", this.props.accessToken).then((labelJson) => {\n//                 this.props.setLabels(labelJson.labels);\n//                 labelJson.labels.map(value => \n//                     db.labels.put({ ...value })\n//                 )\n//             })\n//         }\n\n//         const threadData = await this.serachDB(\"flockdev07@gmail\", \"threads\");\n//         if(threadData){\n//             this.props.setThreadDetails(threadData);\n//         }\n//         else{\n//             apiManager.fetchAPI(\"threads\", \"\").then((threadJson) => {\n//                 let threadArray = []\n//                 threadJson.threads.map(value => \n//                     apiManager.fetchAPI(\"threads\", value.id).then((threadDetailJson => {\n//                         threadArray.push(threadDetailJson);\n//                         this.props.setThreadDetails(threadArray);\n//                         let unionLabels = [];\n//                         threadDetailJson.messages.map(value => {\n//                             unionLabels = [...new Set([...unionLabels, ...value.labelIds])]\n//                             apiManager.fetchAPI(\"messages\", value.id).then(messageDetailJson => \n//                                 db.messages.put({ ...messageDetailJson })\n//                             )\n//                         })\n//                         threadDetailJson.labels = unionLabels;\n//                         db.threads.put({ ...threadDetailJson });\n//                     }))\n//                 )\n//             })\n//         }\n//         refreshTokenSetup(response);\n//     }\n\n//     render(){\n//         return(\n//         <div>\n//             <GoogleLogin \n//                 clientId={CLIENT_ID} \n//                 scope={SCOPES} \n//                 onSuccess={this.handleResponse}\n//             />\n//         </div>\n//         )\n//     }\n\n// }\n\n// export default Login2;\n ","/Users/ys/Desktop/Bootcamp2/gmailclone/src/store/index.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/reducers/index.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/actions/index.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/constants/action-types.ts",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/App.tsx",["103"],"import React from 'react'\nimport Login from './components/Login'\nimport Sidebar from './components/Sidebar'\nimport ThreadList from './components/ThreadList'\nimport { getDB } from './utils/dbManager'\nimport './App.css'\nimport { connect } from \"react-redux\";\n\ninterface Iprops {\n  accessToken: string\n  signedIn: boolean\n  activeLabel: string\n  dispatch?: any\n}\nconst mapStateToProps = (state: Iprops) => {\n  return { \n    accessToken: state.accessToken,\n    signedIn: state.signedIn,\n    activeLabel: state.activeLabel,\n  };\n};\n\nfunction App(props: Iprops) {\n  const db = getDB();\n  return(\n    <div>\n      <div className=\"wrapper\">\n          <nav className=\"sidebar\">\n            <div className=\"sidebar-header\">\n              <h3>Welcome to Gmail clone</h3>\n              { props.signedIn \n                ? \n                <div>\n                  <Sidebar />\n                </div>\n                : <Login />\n              }\n            </div>\n          </nav>\n\n        <div className=\"login-div\">\n          { props.signedIn \n            ? <h1>Welcome, you are signed \n                <hr className='divider-header'/> \n                <ThreadList />\n              </h1>\n            : <h1>Click to Signin</h1>\n          }\n\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default connect(mapStateToProps)(App);;\n ",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":15,"column":42,"nodeType":"110","messageId":"111","endLine":15,"endColumn":43,"fix":"112"},{"ruleId":"113","severity":1,"message":"114","line":40,"column":68,"nodeType":"115","messageId":"116","endLine":40,"endColumn":70},{"ruleId":"117","severity":1,"message":"118","line":6,"column":25,"nodeType":"119","messageId":"120","endLine":6,"endColumn":40,"fix":"121"},{"ruleId":"117","severity":1,"message":"118","line":12,"column":25,"nodeType":"119","messageId":"120","endLine":12,"endColumn":40,"fix":"122"},{"ruleId":"123","severity":1,"message":"124","line":22,"column":43,"nodeType":"125","messageId":"126","endLine":22,"endColumn":45},{"ruleId":"123","severity":1,"message":"124","line":43,"column":43,"nodeType":"125","messageId":"126","endLine":43,"endColumn":45},{"ruleId":"127","severity":1,"message":"128","line":31,"column":29,"nodeType":"129","endLine":31,"endColumn":75},{"ruleId":"127","severity":1,"message":"130","line":32,"column":29,"nodeType":"129","endLine":32,"endColumn":71},{"ruleId":"123","severity":1,"message":"131","line":36,"column":90,"nodeType":"125","messageId":"126","endLine":36,"endColumn":92},{"ruleId":"127","severity":1,"message":"130","line":37,"column":45,"nodeType":"129","endLine":37,"endColumn":104},{"ruleId":"127","severity":1,"message":"128","line":35,"column":88,"nodeType":"129","endLine":35,"endColumn":91},{"ruleId":"132","severity":1,"message":"133","line":5,"column":19,"nodeType":"134","messageId":"135","endLine":5,"endColumn":27},{"ruleId":"132","severity":1,"message":"136","line":24,"column":9,"nodeType":"134","messageId":"135","endLine":24,"endColumn":11},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"139","text":"140"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"141","text":"142"},{"range":"143","text":"142"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Expected '!==' and instead saw '!='.","@typescript-eslint/no-unused-vars","'serachDB' is defined but never used.","Identifier","unusedVar","'db' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[544,545],"",[174,174],"()",[302,302]]