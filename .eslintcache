[{"/Users/ys/Desktop/Bootcamp2/gmailclone/src/index.js":"1","/Users/ys/Desktop/Bootcamp2/gmailclone/src/App.js":"2","/Users/ys/Desktop/Bootcamp2/gmailclone/src/reportWebVitals.js":"3","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Login.js":"4","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Logout.js":"5","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/refreshToken.js":"6","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/googleCredentials.js":"7","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Sidebar.js":"8","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/LoadMessages.js":"9","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/apiManager.js":"10","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/testingLiveQuery.js":"11","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/dbManager.js":"12","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/TestQuery.js":"13"},{"size":500,"mtime":1611820259042,"results":"14","hashOfConfig":"15"},{"size":2478,"mtime":1614082236738,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1611820259043,"results":"17","hashOfConfig":"15"},{"size":3057,"mtime":1614081960861,"results":"18","hashOfConfig":"15"},{"size":600,"mtime":1612127872146,"results":"19","hashOfConfig":"20"},{"size":396,"mtime":1612010717392,"results":"21","hashOfConfig":"15"},{"size":354,"mtime":1612116202395,"results":"22","hashOfConfig":"15"},{"size":1920,"mtime":1614087949191,"results":"23","hashOfConfig":"15"},{"size":1343,"mtime":1613682723008,"results":"24","hashOfConfig":"15"},{"size":1035,"mtime":1612956035425,"results":"25","hashOfConfig":"15"},{"size":875,"mtime":1614082422763,"results":"26","hashOfConfig":"15"},{"size":227,"mtime":1614082305545,"results":"27","hashOfConfig":"15"},{"size":202,"mtime":1614087078305,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"jhpm86",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1spm2wr",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ys/Desktop/Bootcamp2/gmailclone/src/index.js",[],["60","61"],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/App.js",["62"],"import React, { Component } from 'react'\nimport Login from './components/Login'\nimport Sidebar from './components/Sidebar'\nimport LoadMessages from './components/LoadMessages'\n// import Logout from './components/Logout'\nimport './App.css'\nimport TestingLiveQuery from './components/testingLiveQuery'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        signedIn: false,\n        accessToken: \"\",\n        labels: [],\n        threadDetails: [],\n    }\n  }\n\n  signOut = () => {\n    this.setState({ signedIn: false});\n  }\n\n  signIn = () => {\n    this.setState({ signedIn: true});\n  }\n\n  setAccessToken = (access_token) => {\n    this.setState({ accessToken: access_token });\n  }\n\n  setLabels = (labels) => {\n    this.setState({ labels: labels });\n  }\n\n  setThreadDetails = (threadDetails) => {\n    this.setState({ threadDetails: threadDetails });\n  }\n\n  render(){\n      return(\n        <div>\n          <div className=\"wrapper\">\n              <nav id=\"sidebar\">\n                <div className=\"sidebar-header\">\n                  <h3>Welcome to Gmail clone</h3>\n                  <Login \n                    setSignedInState={this.signIn} \n                    accessToken={this.state.accessToken}\n                    setAccessToken={this.setAccessToken}\n                    setLabels={this.setLabels}\n                    setThreadDetails={this.setThreadDetails}\n                  />\n                  { this.state.signedIn \n                    ? <Sidebar \n                        signedInState={this.state.signedIn} \n                        accessToken={this.state.accessToken}\n                        labels={this.state.labels}\n                        setThreadDetails={this.setThreadDetails}\n                      />\n                    : null\n                  }\n                </div>\n              </nav>\n\n            <div className=\"login-div\">\n              { this.state.signedIn \n                ? <h1>Welcome, you are signed \n                    <hr/> \n                    <LoadMessages threadDetails={this.state.threadDetails}/>\n                    {/* <TestingLiveQuery\n                      labels={this.state.labels}\n                      setLabels={this.setLabels}\n                    /> */}\n                  </h1>\n                : <h1>Click to Signin</h1>\n              }\n\n            </div>\n            {/* <Logout setSignedInState={this.signOut} /> */}\n          </div>\n        </div>\n      )\n  }\n\n}\n\nexport default App;\n ","/Users/ys/Desktop/Bootcamp2/gmailclone/src/reportWebVitals.js",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Login.js",["63"],"import React, { Component } from 'react'\nimport { GoogleLogin } from 'react-google-login'\nimport { refreshTokenSetup } from '../utils/refreshToken'\nimport { CLIENT_ID, SCOPES } from '../utils/googleCredentials'\nimport Dexie from 'dexie'\nimport { ApiManager } from '../utils/apiManager'\nimport { db } from '../utils/dbManager'\n\nclass Login extends Component {\n\n    serachDB = async (dbName, tableName) => {\n        const exist = await Dexie.exists(dbName);\n        if(exist){\n            if(db.table(tableName)) {\n                const details = await db.table(tableName).toArray()\n                return (details && details.length ? details : null);\n            }\n            else{\n                return null;\n            }\n        }\n        else{\n            return null;\n        }    \n    }\n\n    handleResponse = async (response) => {\n        if (!response.hasOwnProperty('accessToken')){\n            return;\n        }\n        this.props.setAccessToken(response.tokenObj.access_token);\n        this.props.setSignedInState({ signedIn: true });\n        const apiManager = new ApiManager(\"me\", this.props.accessToken);\n        const labelData = await this.serachDB(\"flockdev07@gmail\", \"labels\");\n        if(labelData){\n            this.props.setLabels(labelData);\n        }\n        else{\n            apiManager.fetchAPI(\"labels\", \"\", this.props.accessToken).then((labelJson) => {\n                this.props.setLabels(labelJson.labels);\n                labelJson.labels.map(value => \n                    db.labels.put({ ...value })\n                )\n            })\n        }\n\n        const threadData = await this.serachDB(\"flockdev07@gmail\", \"threads\");\n        if(threadData){\n            this.props.setThreadDetails(threadData);\n        }\n        else{\n            apiManager.fetchAPI(\"threads\", \"\").then((threadJson) => {\n                let threadArray = []\n                threadJson.threads.map(value => \n                    apiManager.fetchAPI(\"threads\", value.id).then((threadDetailJson => {\n                        threadArray.push(threadDetailJson);\n                        this.props.setThreadDetails(threadArray);\n                        let unionLabels = [];\n                        threadDetailJson.messages.map(value => {\n                            unionLabels = [...new Set([...unionLabels, ...value.labelIds])]\n                            apiManager.fetchAPI(\"messages\", value.id).then(messageDetailJson => \n                                db.messages.put({ ...messageDetailJson })\n                            )\n                        })\n                        threadDetailJson.labels = unionLabels;\n                        db.threads.put({ ...threadDetailJson });\n                    }))\n                )\n            })\n        }\n        refreshTokenSetup(response);\n    }\n\n    render(){\n        return(\n        <div>\n            <GoogleLogin \n                clientId={CLIENT_ID} \n                scope={SCOPES} \n                onSuccess={this.handleResponse}\n            />\n        </div>\n        )\n    }\n\n}\n\nexport default Login;\n ","/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Logout.js",["64"],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/refreshToken.js",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/googleCredentials.js",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/Sidebar.js",["65","66","67","68","69"],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/LoadMessages.js",["70","71"],"import React, { Component } from 'react'\nimport parse from 'html-react-parser';\nimport '../style/style.css'\n\nclass LoadMessages extends Component {\n    processThreads = () => {\n        const threadDetailsArray = this.props.threadDetails;\n        return (\n            <div className=\"list-group\">\n                {\n                    threadDetailsArray.map((thread, threadIndex) => {\n                        const messages = thread.messages;\n                        return (\n                            <div key={threadIndex}>\n                                <a href=\"#\" className=\"list-group-header\">Message Thread {threadIndex+1}</a> \n                                <div className=\"list-group\">\n                                {\n                                    messages.map((message, messageIndex) => {\n                                        return (<a href=\"#\" className=\"list-group-item\" key={messageIndex}><p>Message {messageIndex+1}:</p>{parse(message.snippet)}</a>)\n                                    })\n                                }\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            this.processThreads()\n        )\n    }\n\n}\n\nexport default LoadMessages;\n ","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/apiManager.js",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/testingLiveQuery.js",["72","73"],"import React, { useState } from \"react\";\nimport Dexie, { liveQuery } from \"dexie\";\nimport { db } from '../utils/dbManager'\n\nfunction TestingLiveQuery(props) {\n    const new_label = {\n        \"id\": \"TESTING_LABEL\" + Date.now() ,\n        \"name\": \"TESTING_LABEL\" + Date.now(), \n        \"messageListVisibility\": \"hide\",\n        \"labelListVisibility\": \"labelHide\", \n        \"type\": \"system\"\n    }\n    \n    const testQuery = liveQuery (\n      () => db.labels.filter(label => label.name.includes(\"TESTING_LABEL\")).toArray()\n    );\n    \n    testQuery.subscribe({\n      next: result => {\n          console.log(result, \"testing\");\n        },\n      error: error => console.error(error)\n    });\n    \n\n    return (\n        <div>\n            <button onClick={() => db.labels.put(new_label)}>Click here to test live query</button>\n        </div>\n    );\n}\n\n \nexport default TestingLiveQuery;","/Users/ys/Desktop/Bootcamp2/gmailclone/src/utils/dbManager.js",[],"/Users/ys/Desktop/Bootcamp2/gmailclone/src/components/TestQuery.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":7,"column":8,"nodeType":"80","messageId":"81","endLine":7,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":59,"column":61,"nodeType":"84","messageId":"85","endLine":59,"endColumn":63},{"ruleId":"86","severity":1,"message":"87","line":5,"column":5,"nodeType":"88","messageId":"89","endLine":7,"endColumn":6},{"ruleId":"78","severity":1,"message":"90","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":26},{"ruleId":"78","severity":1,"message":"91","line":1,"column":28,"nodeType":"80","messageId":"81","endLine":1,"endColumn":37},{"ruleId":"78","severity":1,"message":"92","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":13},{"ruleId":"78","severity":1,"message":"93","line":3,"column":17,"nodeType":"80","messageId":"81","endLine":3,"endColumn":26},{"ruleId":"94","severity":1,"message":"95","line":54,"column":88,"nodeType":"96","endLine":54,"endColumn":100},{"ruleId":"94","severity":1,"message":"95","line":15,"column":33,"nodeType":"96","endLine":15,"endColumn":75},{"ruleId":"94","severity":1,"message":"95","line":19,"column":49,"nodeType":"96","endLine":19,"endColumn":108},{"ruleId":"78","severity":1,"message":"97","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"92","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":13},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'TestingLiveQuery' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'useEffect' is defined but never used.","'Dexie' is defined but never used.","'liveQuery' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]